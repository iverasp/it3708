from ann.ANN import ANN

class FlatlandANN:
    def __init__(self):
        self.ann = ANN()

    def learn(self):
        print(self.ann.syn0)
        print(self.ann.syn1)
        self.ann.learn([[0, 0], [1, 0], [1, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 1], [1, 0]], [[0], [0], [1]])
        self.ann.learn([[0, 0], [0, 0], [1, 0]], [[0], [0], [1]])
        self.ann.learn([[0, 1], [1, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[0], [0], [1]])
        self.ann.learn([[1, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 1], [0, 0], [0, 1]], [[0], [1], [0]])
        self.ann.learn([[0, 1], [0, 0], [0, 1]], [[0], [1], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [1, 0]], [[0], [0], [1]])
        self.ann.learn([[0, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [1, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[0, 0], [0, 0], [1, 0]], [[0], [0], [1]])
        self.ann.learn([[1, 0], [0, 1], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[1, 0], [1, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[1, 0], [0, 1], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[1, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [1, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [1, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[1, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[1, 0], [0, 1], [1, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 1], [1, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [1, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [1, 0]], [[0], [0], [1]])
        self.ann.learn([[0, 1], [0, 0], [1, 0]], [[0], [0], [1]])
        self.ann.learn([[1, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[1, 0], [0, 1], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 1], [0, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[0, 1], [0, 0], [0, 0]], [[0], [0], [1]])
        self.ann.learn([[1, 0], [0, 1], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[1, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 1], [1, 0], [0, 0]], [[0], [0], [1]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[0], [0], [1]])
        self.ann.learn([[0, 1], [0, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[1, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [1, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[0, 1], [0, 0], [1, 0]], [[0], [0], [1]])
        self.ann.learn([[1, 0], [0, 0], [0, 0]], [[0], [0], [1]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[1, 0], [1, 0], [0, 1]], [[0], [1], [0]])
        self.ann.learn([[0, 1], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 1], [1, 0], [1, 0]], [[0], [1], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[0], [0], [1]])
        self.ann.learn([[0, 0], [0, 1], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 1], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[1, 0], [0, 1], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[0], [0], [1]])
        self.ann.learn([[1, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[1, 0], [0, 1], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 1], [1, 0], [0, 1]], [[0], [1], [0]])
        self.ann.learn([[0, 0], [0, 1], [1, 0]], [[0], [0], [1]])
        self.ann.learn([[0, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [1, 0]], [[0], [0], [1]])
        self.ann.learn([[1, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 1], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[0, 0], [0, 1], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[0], [0], [1]])
        self.ann.learn([[0, 0], [0, 0], [0, 1]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[0], [1], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 1], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[0, 0], [0, 0], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[1, 0], [0, 1], [0, 0]], [[1], [0], [0]])
        self.ann.learn([[1, 0], [0, 1], [0, 1]], [[1], [0], [0]])
        print(self.ann.syn0)
        print(self.ann.syn1)

    def predict_move(self, case):
        l2 = self.ann.predict(case).tolist()
        return l2.index(max(l2))
